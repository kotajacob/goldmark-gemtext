package gemtext

// Config has configurations for the gemini renderer.
type Config struct {
	HeadingLink   HeadingLink
	ParagraphLink ParagraphLink
	Emphasis      Emphasis
	Strikethrough Strikethrough
	CodeSpan      CodeSpan
}

// NewConfig returns a new Config with defaults.
func NewConfig() *Config {
	return &Config{
		HeadingLink:   HeadingLinkAuto,
		ParagraphLink: ParagraphLinkBelow,
		Emphasis:      EmphasisOff,
		Strikethrough: StrikethroughOff,
		CodeSpan:      CodeSpanOff,
	}
}

// An Option interface sets options for gemini renderers.
type Option interface {
	// Replace the current configuration.
	SetConfig(*Config)
}

// A function that implements the Option interface.
type OptionFunc func(*Config)

// SetConfig replaces the current configuration.
func (o OptionFunc) SetConfig(c *Config) {
	o(c)
}

// Pass a completely new config as an option.
func WithConfig(config *Config) Option {
	return OptionFunc(func(c *Config) {
		*c = *config
	})
}

// Set HeadingLink mode.
func WithHeadingLink(val HeadingLink) Option {
	return OptionFunc(func(c *Config) {
		c.HeadingLink = val
	})
}

// HeadingLink is an emun config option that controls how links in headings are
// treated.
type HeadingLink uint8

const (
	// Ignore links in headings; writing the label of the link in its place.
	HeadingLinkOff HeadingLink = iota
	// If the heading contains only links. If so, use the first link instead of
	// printing a heading. Otherwise print a heading, ignoring links.
	HeadingLinkAuto
	// Print all links below heading.
	HeadingLinkBelow
)

// Set ParagraphLink mode.
func WithParagraphLink(val ParagraphLink) Option {
	return OptionFunc(func(c *Config) {
		c.ParagraphLink = val
	})
}

// ParagraphLink is an enum config option that controls how links in
// paragraphs are treated.
type ParagraphLink uint8

const (
	// Ignore links in paragraphs; writing the label of the link in its place.
	ParagraphLinkOff ParagraphLink = iota
	// Print links below paragraph.
	ParagraphLinkBelow
	// Print links before next heading or at end of the document.
	ParagraphLinkSection
	// Print links at end of the document.
	ParagraphLinkDocument
)

// Set Emphasis mode.
func WithEmphasis(val Emphasis) Option {
	return OptionFunc(func(c *Config) {
		c.Emphasis = val
	})
}

// Emphasis is an enum config option that controls how markdown emphasis (bold
// and italics) are treated.
type Emphasis uint8

const (
	// Strip out markdown emphasis symbols (* and _)
	EmphasisOff Emphasis = iota
	// Print markdown emphasis symbols for italics and bold (** and _)
	EmphasisMarkdown
	// Print markdown emphasis using 𝘄𝗲𝗶𝗿𝗱 𝘶𝘯𝘪𝘤𝘰𝘥𝘦 hacks.
	// NOTE: The current generation of screenreaders are unable to handle this
	// hack. The symbols are meant for mathematics and are pronounced
	// individually as such. As a result you should ONLY use this option if
	// you're providing an alternative accessible copy of your document.
	EmphasisUnicode
)

// Set Strikethrough mode.
func WithStrikethrough(val Strikethrough) Option {
	return OptionFunc(func(c *Config) {
		c.Strikethrough = val
	})
}

// Strikethrough is an enum config option that controls how markdown
// strikethrough (per the github markdown extension) is treated.
type Strikethrough uint8

const (
	// Strip out markdown strikethrough symbols (~~).
	StrikethroughOff Strikethrough = iota
	// Print markdown strikethrough symbols (~~).
	StrikethroughMarkdown
	// Print strikethrough using 𝘄𝗲𝗶𝗿𝗱 𝘶𝘯𝘪𝘤𝘰𝘥𝘦 hacks.
	// NOTE: The current generation of screenreaders are unable to handle this
	// hack. The symbols are generated by manipulating diacritical marks which
	// traditionally influence pronunciation. As a result you should ONLY use
	// this option if you're providing an alternative accessible copy of your
	// document.
	StrikethroughUnicode
)

// Set CodeSpan mode.
func WithCodeSpan(val CodeSpan) Option {
	return OptionFunc(func(c *Config) {
		c.CodeSpan = val
	})
}

// CodeSpan is an enum config option that controls how markdown codespan is
// treated.
type CodeSpan uint8

const (
	// Strip out markdown codespan symbols.
	CodeSpanOff CodeSpan = iota
	// Print markdown codespan symbols.
	CodeSpanMarkdown
)
